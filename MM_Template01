{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11165145,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport polars as pl # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2025-02-27T19:07:05.349655Z","iopub.execute_input":"2025-02-27T19:07:05.349995Z","iopub.status.idle":"2025-02-27T19:07:07.810838Z","shell.execute_reply.started":"2025-02-27T19:07:05.349959Z","shell.execute_reply":"2025-02-27T19:07:07.809673Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w_teams = pl.scan_csv(\"/kaggle/input/march-machine-learning-mania-2025/WTeams.csv\").collect()\nm_teams = pl.scan_csv(\"/kaggle/input/march-machine-learning-mania-2025/MTeams.csv\").collect()\nm_compact_results = pl.scan_csv(\"/kaggle/input/march-machine-learning-mania-2025/MRegularSeasonCompactResults.csv\").collect()\nw_compact_results = pl.scan_csv(\"/kaggle/input/march-machine-learning-mania-2025/WRegularSeasonCompactResults.csv\").collect()\n\nsubmission_stage1 = pl.scan_csv (\"/kaggle/input/march-machine-learning-mania-2025/SampleSubmissionStage1.csv\").collect()\nsubmission_stage2 = pl.scan_csv (\"/kaggle/input/march-machine-learning-mania-2025/SampleSubmissionStage2.csv\").collect()\n\nm_truth = pl.scan_csv (\"/kaggle/input/march-machine-learning-mania-2025/MNCAATourneyCompactResults.csv\").collect()\nw_truth = pl.scan_csv (\"/kaggle/input/march-machine-learning-mania-2025/WNCAATourneyCompactResults.csv\").collect()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:07.812306Z","iopub.execute_input":"2025-02-27T19:07:07.812784Z","iopub.status.idle":"2025-02-27T19:07:08.158836Z","shell.execute_reply.started":"2025-02-27T19:07:07.812750Z","shell.execute_reply":"2025-02-27T19:07:08.157632Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w_teams.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.161013Z","iopub.execute_input":"2025-02-27T19:07:08.161438Z","iopub.status.idle":"2025-02-27T19:07:08.186645Z","shell.execute_reply.started":"2025-02-27T19:07:08.161397Z","shell.execute_reply":"2025-02-27T19:07:08.185604Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display (submission_stage1.sort (\"ID\"))\ndisplay (submission_stage2.sort (\"ID\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.188201Z","iopub.execute_input":"2025-02-27T19:07:08.188689Z","iopub.status.idle":"2025-02-27T19:07:08.290357Z","shell.execute_reply.started":"2025-02-27T19:07:08.188648Z","shell.execute_reply":"2025-02-27T19:07:08.289265Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w_compact_results.get_column(\"Season\").unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.291344Z","iopub.execute_input":"2025-02-27T19:07:08.291672Z","iopub.status.idle":"2025-02-27T19:07:08.320740Z","shell.execute_reply.started":"2025-02-27T19:07:08.291647Z","shell.execute_reply":"2025-02-27T19:07:08.319547Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"m_compact_results.filter (pl.col(\"Season\") == 2021).describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.321857Z","iopub.execute_input":"2025-02-27T19:07:08.322222Z","iopub.status.idle":"2025-02-27T19:07:08.352710Z","shell.execute_reply.started":"2025-02-27T19:07:08.322188Z","shell.execute_reply":"2025-02-27T19:07:08.351715Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"w_truth","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.353635Z","iopub.execute_input":"2025-02-27T19:07:08.353908Z","iopub.status.idle":"2025-02-27T19:07:08.361030Z","shell.execute_reply.started":"2025-02-27T19:07:08.353885Z","shell.execute_reply":"2025-02-27T19:07:08.360025Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission_stage1.filter (pl.col(\"ID\") == \"2024_3234_3376\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.362010Z","iopub.execute_input":"2025-02-27T19:07:08.362330Z","iopub.status.idle":"2025-02-27T19:07:08.389920Z","shell.execute_reply.started":"2025-02-27T19:07:08.362305Z","shell.execute_reply":"2025-02-27T19:07:08.388786Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def win_loss_record (teams : pl.DataFrame) -> pl.DataFrame :\n    \n    result = teams.select (\"TeamID\")\n    base_file =  w_compact_results if (teams.get_column(\"TeamID\").min() > 2000) else m_compact_results\n    # season_results = base_file.filter (pl.col(\"Season\") == season)\n    \n        \n    wins = base_file.group_by ([\"Season\",\"WTeamID\"]).len()\n    losses = base_file.group_by ([\"Season\",\"LTeamID\"]).len()\n    wscores =  base_file.group_by ([\"Season\",\"WTeamID\"]).agg (pl.col(\"WScore\").sum())\n    lscores = base_file.group_by ([\"Season\",\"LTeamID\"]).agg (pl.col(\"LScore\").sum())\n    opp_wscores = base_file.group_by ([\"Season\",\"WTeamID\"]).agg (pl.col(\"LScore\").sum())\n    opp_lscores = base_file.group_by ([\"Season\",\"LTeamID\"]).agg (pl.col(\"WScore\").sum())\n    \n    result = result.join (wins, how = \"left\", left_on = \"TeamID\", right_on = \"WTeamID\")\n    result = result.rename ({\"len\" : \"games won\"})\n    result = result.join (losses, how = \"left\", left_on = [\"TeamID\", \"Season\"], right_on = [\"LTeamID\", \"Season\"])\n    result = result.rename ({\"len\" : \"games lost\"})\n    result = result.join (wscores, how = \"left\", left_on = [\"TeamID\", \"Season\"], right_on = [\"WTeamID\", \"Season\"])\n    result = result.rename ({\"WScore\" : \"points in win\"})\n    result = result.join (lscores, how = \"left\", left_on = [\"TeamID\", \"Season\"], right_on = [\"LTeamID\", \"Season\"])\n    result = result.rename ({\"LScore\" : \"points in loss\"})\n    result = result.join (opp_wscores, how = \"left\", left_on = [\"TeamID\", \"Season\"], right_on = [\"WTeamID\", \"Season\"])\n    result = result.rename ({\"LScore\" : \"dev points in win\"})\n    result = result.join (opp_lscores, how = \"left\", left_on = [\"TeamID\", \"Season\"], right_on = [\"LTeamID\", \"Season\"])\n    result = result.rename ({\"WScore\" : \"dev points in loss\"})\n    result = result.with_columns ((pl.col(\"games won\") + pl.col(\"games lost\")).alias (\"total games\"), \n                                  (pl.col(\"points in win\") + pl.col(\"points in loss\")).alias (\"total points\"), \n                                  (pl.col(\"dev points in win\") + pl.col(\"dev points in loss\")).alias (\"total dev points\"))\n    \n    return result.fill_null(0)\n\nmale_team_results = win_loss_record (m_teams)\n\ndisplay (male_team_results)\n\nfemale_team_results = win_loss_record (w_teams)\n\ndisplay (female_team_results)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.392786Z","iopub.execute_input":"2025-02-27T19:07:08.393134Z","iopub.status.idle":"2025-02-27T19:07:08.633017Z","shell.execute_reply.started":"2025-02-27T19:07:08.393104Z","shell.execute_reply":"2025-02-27T19:07:08.632000Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def create_train (df,truth :pl.DataFrame) -> pl.DataFrame :\n    \n    truth_is_female = (truth.get_column (\"WTeamID\").min() > 2000)\n    \n    result = df.with_columns (pl.col(\"ID\").str.split (\"_\").list.get(0).cast(pl.Int64).alias (\"Season\"),\n                             pl.col(\"ID\").str.split (\"_\").list.get(1).cast(pl.Int64).alias (\"Team1\"),\n                             pl.col(\"ID\").str.split (\"_\").list.get(2).cast(pl.Int64).alias (\"Team2\"))\n    print (f\"input df size = {result.shape}\")\n    print (f\"{result.head()}\")\n    print (f\"{truth.head()}\")\n    if truth_is_female :\n        result = result.filter (pl.col('Team1') > 2000)\n    else :\n        result = result.filter (pl.col('Team1') < 2000)\n    print (f\"gender result size = {result.shape}\")\n    print (result.columns)\n    result = result.join (truth, how = \"left\", left_on = [\"Season\", \"Team1\", \"Team2\"], right_on = [\"Season\", \"WTeamID\", \"LTeamID\"])\n    result = result.join (truth, how = \"left\", left_on = [\"Season\", \"Team1\", \"Team2\"], right_on = [\"Season\", \"LTeamID\", \"WTeamID\"])\n    print (f\"{result.head()}\")\n    print (result.group_by(\"WScore\").len())\n    print (result.group_by(\"WScore_right\").len())\n    result = result.with_columns (pl.when (pl.col(\"WScore\") > 0 ).then (pl.lit(1)).otherwise (\n                                  pl.when (pl.col(\"WScore_right\") > 0 ).then (pl.lit(0)).otherwise (\n                                           pl.lit(0.5))).alias (\"truth\")\n                                  \n    )\n    print (result.columns)     \n\n    return result.drop ('Pred') \n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.634453Z","iopub.execute_input":"2025-02-27T19:07:08.634788Z","iopub.status.idle":"2025-02-27T19:07:08.643725Z","shell.execute_reply.started":"2025-02-27T19:07:08.634764Z","shell.execute_reply":"2025-02-27T19:07:08.642527Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"male_training = create_train (submission_stage1, m_truth).filter ((pl.col(\"truth\") ==1) | (pl.col(\"truth\") ==0))\nfemale_training = create_train (submission_stage1, w_truth).filter ((pl.col(\"truth\") ==1) | (pl.col(\"truth\") ==0))\n\nmale_submission = create_train (submission_stage2, m_truth)\nfemale_submission = create_train (submission_stage2, w_truth)\n\nprint (f\" total size {male_training.shape[0] + female_training.shape[0] }   \")\n\n\nprint (f\" total size {male_submission.shape[0] + female_submission.shape[0] }   \")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:08.644852Z","iopub.execute_input":"2025-02-27T19:07:08.645219Z","iopub.status.idle":"2025-02-27T19:07:09.206745Z","shell.execute_reply.started":"2025-02-27T19:07:08.645186Z","shell.execute_reply":"2025-02-27T19:07:09.205275Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"male_training = male_training.join (male_team_results, how = \"left\", left_on = [\"Season\",\"Team1\"], right_on = [\"Season\",\"TeamID\"])\nmale_training = male_training.join (male_team_results, how = \"left\", left_on = [\"Season\",\"Team2\"], right_on = [\"Season\",\"TeamID\"])\n\n\nfemale_training = female_training.join (female_team_results, how = \"left\", left_on = [\"Season\", \"Team1\"], right_on = [\"Season\",\"TeamID\"])\nfemale_training = female_training.join (female_team_results, how = \"left\", left_on = [\"Season\", \"Team2\"], right_on = [\"Season\",\"TeamID\"])\n\nX_train = pl.concat ([male_training, female_training], how = \"vertical\").sample (fraction = 1, shuffle = True)\n\nX_train\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:09.207954Z","iopub.execute_input":"2025-02-27T19:07:09.208279Z","iopub.status.idle":"2025-02-27T19:07:09.233954Z","shell.execute_reply.started":"2025-02-27T19:07:09.208250Z","shell.execute_reply":"2025-02-27T19:07:09.232939Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"male_submission = male_submission.join (male_team_results, how = \"left\", left_on = [\"Season\", \"Team1\"], right_on = [\"Season\",\"TeamID\"]) \nmale_submission = male_submission.join (male_team_results, how = \"left\", left_on = [\"Season\", \"Team2\"], right_on = [\"Season\",\"TeamID\"]) \n\nfemale_submission = female_submission.join (female_team_results, how = \"left\", left_on = [\"Season\", \"Team1\"], right_on = [\"Season\",\"TeamID\"]) \nfemale_submission = female_submission.join (female_team_results, how = \"left\", left_on = [\"Season\", \"Team2\"], right_on = [\"Season\",\"TeamID\"]) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:09.235031Z","iopub.execute_input":"2025-02-27T19:07:09.235410Z","iopub.status.idle":"2025-02-27T19:07:09.268291Z","shell.execute_reply.started":"2025-02-27T19:07:09.235375Z","shell.execute_reply":"2025-02-27T19:07:09.267249Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install ray==2.10.0\n!pip install autogluon.tabular --no-cache-dir -q\n!pip install -U ipywidgets","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:09.269400Z","iopub.execute_input":"2025-02-27T19:07:09.269923Z","iopub.status.idle":"2025-02-27T19:07:43.470703Z","shell.execute_reply.started":"2025-02-27T19:07:09.269885Z","shell.execute_reply":"2025-02-27T19:07:43.469155Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from autogluon.tabular import TabularPredictor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:43.471980Z","iopub.execute_input":"2025-02-27T19:07:43.472279Z","iopub.status.idle":"2025-02-27T19:07:44.068328Z","shell.execute_reply.started":"2025-02-27T19:07:43.472251Z","shell.execute_reply":"2025-02-27T19:07:44.067210Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictor = TabularPredictor(path = '/kaggle/working/march_madness',\n                                       label='truth', \n                               problem_type = 'binary', \n                               eval_metric =  'accuracy',  \n                               # sample_weight = 'my_weight',\n                               verbosity  = 2,\n                               learner_kwargs = {'ignored_columns' : [\n                                   'ID']})\n                                 \npredictor.fit(train_data= male_training.to_pandas(), \n                        presets= 'best_quality',\n    # best_quality, high_quality, medium_quality, 'experimental_quality',                         \n                        time_limit = 16000,\n                        num_gpus=0,\n                        raise_on_no_models_fitted = True,\n                        #dynamic_stacking=False, \n                        #num_stack_levels=0,\n                        #hyperparameters=hyper_search,\n#                         hyperparameters = my_search_hyperparameters  ,\n                        #hyperparameter_tune_kwargs=hyperparameter_tune_kwargs,\n                        )                              \n                                ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T19:07:44.069314Z","iopub.execute_input":"2025-02-27T19:07:44.069864Z","execution_failed":"2025-02-27T20:05:36.791Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictor.leaderboard()\n\n ","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-27T20:05:36.791Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_test = pl.concat ([male_submission, female_submission], how = \"vertical\")\ndisplay (X_test.shape)\n\n\n    \nmarch_madness_prediction =  predictor.predict_proba(X_test.to_pandas()) ","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-27T20:05:36.791Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"display (march_madness_prediction)\n\nprobabilty_first_team = pl.Series (\"Pred\", march_madness_prediction [0])\nmy_submit = pl.DataFrame ([X_test.get_column (\"ID\"), probabilty_first_team]) \n    \n\n\nmy_submit","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-27T20:05:36.791Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"my_submit.write_csv(\"submission.csv\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-27T20:05:36.791Z"}},"outputs":[],"execution_count":null}]}